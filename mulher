local esplib = getgenv().esplib
if not esplib then
    esplib = {
        box = {
            enabled = true,
            type = "normal", -- normal, corner
            padding = 1.15, -- Aumenta o tamanho da caixa delimitadora
            fill = Color3.new(1,1,1),
            outline = Color3.new(0,0,0),
        },
        healthbar = {
            enabled = true,
            fill = Color3.new(0,1,0),
            outline = Color3.new(0,0,0),
        },
        name = {
            enabled = true,
            fill = Color3.new(1,1,1),
            size = 13,
        },
        distance = {
            enabled = true,
            fill = Color3.new(1,1,1),
            size = 13,
        },
        tracer = {
            enabled = true,
            fill = Color3.new(1,1,1),
            outline = Color3.new(0,0,0),
            from = "bottom", -- mouse, head, top, bottom, center
        },
    }
    getgenv().esplib = esplib
end

local espinstances = {} -- Mapeia instâncias para seus objetos Drawing
local espfunctions = {} -- Funções públicas para exportar

-- // Serviços
local run_service = game:GetService("RunService")
local players = game:GetService("Players")
local user_input_service = game:GetService("UserInputService")
local camera = workspace.CurrentCamera

-- // Funções Auxiliares
--- Obtém a caixa delimitadora (bounding box) de uma instância na tela.
local function get_bounding_box(instance)
    local min, max = Vector2.new(math.huge, math.huge), Vector2.new(-math.huge, -math.huge)
    local onscreen = false

    local parts_to_check = {}

    if instance:IsA("Model") then
        -- Coleta todas as BaseParts diretas e Handles de Accessories
        for _, p in ipairs(instance:GetChildren()) do
            if p:IsA("BasePart") then
                table.insert(parts_to_check, p)
            elseif p:IsA("Accessory") then
                local handle = p:FindFirstChild("Handle")
                if handle and handle:IsA("BasePart") then
                    table.insert(parts_to_check, handle)
                end
            end
        end
    elseif instance:IsA("BasePart") then
        table.insert(parts_to_check, instance)
    end

    for _, p in ipairs(parts_to_check) do
        local size = (p.Size / 2) * esplib.box.padding
        local cf = p.CFrame
        -- Projeta os 8 cantos da parte na tela
        for _, offset in ipairs({
            Vector3.new( size.X,  size.Y,  size.Z),
            Vector3.new(-size.X,  size.Y,  size.Z),
            Vector3.new( size.X, -size.Y,  size.Z),
            Vector3.new(-size.X, -size.Y,  size.Z),
            Vector3.new( size.X,  size.Y, -size.Z),
            Vector3.new(-size.X,  size.Y, -size.Z),
            Vector3.new( size.X, -size.Y, -size.Z),
            Vector3.new(-size.X, -size.Y, -size.Z),
        }) do
            local pos, visible = camera:WorldToViewportPoint(cf:PointToWorldSpace(offset))
            if visible then
                local v2 = Vector2.new(pos.X, pos.Y)
                min = min:Min(v2)
                max = max:Max(v2)
                onscreen = true
            end
        end
    end

    return min, max, onscreen
end

-- // Funções de Adição de ESP (expõem as funcionalidades da biblioteca)
function espfunctions.add_box(instance)
    if not instance or (espinstances[instance] and espinstances[instance].box) then return end

    local box = {}

    -- Desenho para a caixa tipo "normal"
    local outline = Drawing.new("Square")
    outline.Thickness = 3
    outline.Filled = false
    outline.Transparency = 1
    outline.Visible = false

    local fill = Drawing.new("Square")
    fill.Thickness = 1
    fill.Filled = false
    fill.Transparency = 1
    fill.Visible = false

    box.outline = outline
    box.fill = fill

    -- Desenhos para a caixa tipo "corner" (8 linhas)
    box.corner_fill = {}
    box.corner_outline = {}
    for i = 1, 8 do
        local outline_line = Drawing.new("Line")
        outline_line.Thickness = 3
        outline_line.Transparency = 1
        outline_line.Visible = false

        local fill_line = Drawing.new("Line")
        fill_line.Thickness = 1
        fill_line.Transparency = 1
        fill_line.Visible = false

        table.insert(box.corner_outline, outline_line)
        table.insert(box.corner_fill, fill_line)
    end

    espinstances[instance] = espinstances[instance] or {}
    espinstances[instance].box = box
end

function espfunctions.add_healthbar(instance)
    if not instance or (espinstances[instance] and espinstances[instance].healthbar) then return end
    
    local outline = Drawing.new("Square")
    outline.Thickness = 1
    outline.Filled = true
    outline.Transparency = 1
    outline.Visible = false

    local fill = Drawing.new("Square")
    fill.Filled = true
    fill.Transparency = 1
    fill.Visible = false

    espinstances[instance] = espinstances[instance] or {}
    espinstances[instance].healthbar = {
        outline = outline,
        fill = fill,
    }
end

function espfunctions.add_name(instance)
    if not instance or (espinstances[instance] and espinstances[instance].name) then return end
    
    local text = Drawing.new("Text")
    text.Center = true
    text.Outline = true
    text.Font = 1 -- Assumindo Font.Arial
    text.Transparency = 1
    text.Visible = false

    espinstances[instance] = espinstances[instance] or {}
    espinstances[instance].name = text
end

function espfunctions.add_distance(instance)
    if not instance or (espinstances[instance] and espinstances[instance].distance) then return end
    
    local text = Drawing.new("Text")
    text.Center = true
    text.Outline = true
    text.Font = 1 -- Assumindo Font.Arial
    text.Transparency = 1
    text.Visible = false

    espinstances[instance] = espinstances[instance] or {}
    espinstances[instance].distance = text
end

function espfunctions.add_tracer(instance)
    if not instance or (espinstances[instance] and espinstances[instance].tracer) then return end
    
    local outline = Drawing.new("Line")
    outline.Thickness = 3
    outline.Transparency = 1
    outline.Visible = false

    local fill = Drawing.new("Line")
    fill.Thickness = 1
    fill.Transparency = 1
    fill.Visible = false

    espinstances[instance] = espinstances[instance] or {}
    espinstances[instance].tracer = {
        outline = outline,
        fill = fill,
    }
end

-- // Thread Principal de Desenho (Loop de Renderização)
run_service.RenderStepped:Connect(function()
    for instance, data in pairs(espinstances) do
        -- 1. Limpeza de Instâncias Removidas ou Inválidas
        if not instance or not instance.Parent or (instance:IsA("Model") and not instance.PrimaryPart) then
            -- Remove todos os objetos Drawing e a entrada da tabela
            if data.box then
                data.box.outline:Remove()
                data.box.fill:Remove()
                for _, line in ipairs(data.box.corner_fill) do line:Remove() end
                for _, line in ipairs(data.box.corner_outline) do line:Remove() end
            end
            if data.healthbar then
                data.healthbar.outline:Remove()
                data.healthbar.fill:Remove()
            end
            if data.name then data.name:Remove() end
            if data.distance then data.distance:Remove() end
            if data.tracer then
                data.tracer.outline:Remove()
                data.tracer.fill:Remove()
            end
            espinstances[instance] = nil
            continue
        end

        -- 2. Cálculo da Caixa Delimitadora
        local min, max, onscreen = get_bounding_box(instance)

        -- 3. Atualização da Caixa (Box ESP)
        if data.box then
            local box = data.box
            local is_box_visible = esplib.box.enabled and onscreen

            if is_box_visible then
                local x, y = min.X, min.Y
                local w, h = (max - min).X, (max - min).Y
                local len = math.min(w, h) * 0.25 -- Comprimento do canto

                if esplib.box.type == "normal" then
                    -- Esconde linhas de canto
                    for _, line in ipairs(box.corner_fill) do line.Visible = false end
                    for _, line in ipairs(box.corner_outline) do line.Visible = false end

                    -- Atualiza caixa normal
                    box.outline.Position = min
                    box.outline.Size = max - min
                    box.outline.Color = esplib.box.outline
                    box.outline.Visible = true

                    box.fill.Position = min
                    box.fill.Size = max - min
                    box.fill.Color = esplib.box.fill
                    box.fill.Visible = true

                elseif esplib.box.type == "corner" then
                    -- Esconde caixa normal
                    box.outline.Visible = false
                    box.fill.Visible = false

                    local fill_lines = box.corner_fill
                    local outline_lines = box.corner_outline
                    local fill_color = esplib.box.fill
                    local outline_color = esplib.box.outline

                    -- Define as coordenadas de início e fim dos 8 cantos
                    local corners = {
                        { Vector2.new(x, y), Vector2.new(x + len, y) },
                        { Vector2.new(x, y), Vector2.new(x, y + len) },

                        { Vector2.new(x + w - len, y), Vector2.new(x + w, y) },
                        { Vector2.new(x + w, y), Vector2.new(x + w, y + len) },

                        { Vector2.new(x, y + h), Vector2.new(x + len, y + h) },
                        { Vector2.new(x, y + h - len), Vector2.new(x, y + h) },

                        { Vector2.new(x + w - len, y + h), Vector2.new(x + w, y + h) },
                        { Vector2.new(x + w, y + h - len), Vector2.new(x + w, y + h) },
                    }

                    for i = 1, 8 do
                        local from, to = corners[i][1], corners[i][2]
                        local dir = (to - from).Unit
                        local oFrom = from - dir * 0.5 -- Pequeno ajuste para outline
                        local oTo = to + dir * 0.5

                        -- Atualiza Outline
                        outline_lines[i].From = oFrom
                        outline_lines[i].To = oTo
                        outline_lines[i].Color = outline_color
                        outline_lines[i].Visible = true

                        -- Atualiza Fill
                        fill_lines[i].From = from
                        fill_lines[i].To = to
                        fill_lines[i].Color = fill_color
                        fill_lines[i].Visible = true
                    end
                end
            else
                -- Esconde tudo se não estiver visível
                box.outline.Visible = false
                box.fill.Visible = false
                for _, line in ipairs(box.corner_fill) do line.Visible = false end
                for _, line in ipairs(box.corner_outline) do line.Visible = false end
            end
        end

        -- 4. Atualização da Barra de Vida (Healthbar ESP)
        if data.healthbar then
            local outline, fill = data.healthbar.outline, data.healthbar.fill
            local humanoid = instance:FindFirstChildOfClass("Humanoid")

            local is_healthbar_visible = esplib.healthbar.enabled and onscreen and humanoid and humanoid.MaxHealth > 0

            if is_healthbar_visible then
                local height = max.Y - min.Y
                local bar_width = 3
                local padding = 1
                local x = min.X - bar_width - padding * 2 
                local y = min.Y

                local health_ratio = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                local fill_height = height * health_ratio

                -- Outline (Fundo da Barra)
                outline.Color = esplib.healthbar.outline
                outline.Position = Vector2.new(x, y)
                outline.Size = Vector2.new(bar_width, height)
                outline.Visible = true

                -- Fill (Preenchimento da Vida) - cresce de baixo para cima
                fill.Color = esplib.healthbar.fill
                fill.Position = Vector2.new(x, y + (height - fill_height))
                fill.Size = Vector2.new(bar_width, fill_height)
                fill.Visible = true
            else
                outline.Visible = false
                fill.Visible = false
            end
        end

        -- 5. Atualização do Nome (Name ESP)
        if data.name then
            if esplib.name.enabled and onscreen then
                local text = data.name
                local center_x = (min.X + max.X) / 2
                local y = min.Y - 15 -- Posição acima da caixa

                local name_str = instance.Name
                local player = players:GetPlayerFromCharacter(instance)
                if player then
                    name_str = player.Name
                end

                text.Text = name_str
                text.Size = esplib.name.size
                text.Color = esplib.name.fill
                text.Position = Vector2.new(center_x, y)
                text.Visible = true
            else
                data.name.Visible = false
            end
        end

        -- 6. Atualização da Distância (Distance ESP)
        if data.distance then
            if esplib.distance.enabled and onscreen then
                local text = data.distance
                local center_x = (min.X + max.X) / 2
                local y = max.Y + 5 -- Posição abaixo da caixa
                
                local primary_part = instance.PrimaryPart or instance:IsA("BasePart") and instance
                local dist = 999

                if primary_part then
                    dist = (camera.CFrame.Position - primary_part.Position).Magnitude
                end

                text.Text = tostring(math.floor(dist)) .. "m"
                text.Size = esplib.distance.size
                text.Color = esplib.distance.fill
                text.Position = Vector2.new(center_x, y)
                text.Visible = true
            else
                data.distance.Visible = false
            end
        end

        -- 7. Atualização do Tracer (Tracer ESP)
        if data.tracer then
            local outline, fill = data.tracer.outline, data.tracer.fill

            if esplib.tracer.enabled and onscreen then
                local from_pos = Vector2.new()
                local to_pos = (min + max) / 2 -- Centro da caixa delimitadora

                -- Determina o ponto de origem do Tracer
                if esplib.tracer.from == "mouse" then
                    local mouse_location = user_input_service:GetMouseLocation()
                    from_pos = Vector2.new(mouse_location.X, mouse_location.Y)
                elseif esplib.tracer.from == "head" then
                    local head = instance:FindFirstChild("Head") or instance:FindFirstChild("Torso") or instance.PrimaryPart
                    if head then
                        local pos, visible = camera:WorldToViewportPoint(head.Position)
                        from_pos = Vector2.new(pos.X, pos.Y)
                    end
                elseif esplib.tracer.from == "bottom" then
                    from_pos = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
                elseif esplib.tracer.from == "center" then
                    from_pos = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
                else
                    from_pos = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
                end

                -- Atualiza Outline
                outline.From = from_pos
                outline.To = to_pos
                outline.Color = esplib.tracer.outline
                outline.Visible = true

                -- Atualiza Fill
                fill.From = from_pos
                fill.To = to_pos
                fill.Color = esplib.tracer.fill
                fill.Visible = true
            else
                outline.Visible = false
                fill.Visible = false
            end
        end
    end
end)

-- // Retorno da Biblioteca
for k, v in pairs(espfunctions) do
    esplib[k] = v
end

return esplib
